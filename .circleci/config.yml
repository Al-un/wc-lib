# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  integration:
    jobs:
      - init:
          filters:
            tags:
              only: /^v.*/ # to forward to publish
      - lint:
          requires:
            - init
          filters:
            tags:
              only: /^v.*/ # to forward to publish
      - test-unit:
          requires:
            - lint
          filters:
            tags:
              only: /^v.*/ # to forward to publish
      - test-playwright:
          requires:
            - lint
          filters:
            tags:
              only: /^v.*/ # to forward to publish
      - build:
          requires:
            - test-unit
            - test-playwright
          filters:
            tags:
              only: /^v.*/ # to forward to publish
      - build-storybook:
          requires:
            - test-unit
            - test-playwright
          filters:
            tags:
              only: /^v.*/ # to forward to publish
      - publish:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  init:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:15.1
    working_directory: ~/repo
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      # - node/install-packages
      # If you are using yarn instead npm, remove the line above and uncomment the two lines below.
      - node/install-packages:
          pkg-manager: yarn
      - persist_to_workspace:
          root: ./
          paths:
            - node_modules/
            - packages/wcl-core/node_modules/
            - packages/wcl-lit-ts/node_modules/
            - demos/vanilla-html/node_modules/
            - demos/vanilla-js/node_modules/
            - demos/vanilla-ts/node_modules/

  lint:
    docker:
      - image: cimg/node:15.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - run:
          name: Linting check
          command: yarn lerna run lint

  # Unit testing: standard / base version?
  test-unit:
    docker:
      - image: cimg/node:15.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - run:
          name: Base testing
          command: yarn lerna run test

  # Unit testing powered by PlayWright
  #   https://modern-web.dev/docs/test-runner/testing-in-a-ci/
  #   https://playwright.dev/docs/ci/#circleci
  test-playwright:
    docker:
      - image: mcr.microsoft.com/playwright:focal
    working_directory: ~/repo
    environment:
      NODE_ENV: development
    steps:
      - checkout
      # - attach_workspace:
      #     at: ~/repo/
      - restore_cache:
          keys:
            - wc-lib-v2-{{ checksum "yarn.lock" }}
            - wc-lib-v2-
      - run:
          name: Install dependencies
          command: yarn install
      - save_cache:
          key: wc-lib-v2-{{ checksum "yarn.lock" }}
          paths:
            - demos/vanilla-js/node_modules
            - demos/vanilla-ts/node_modules
            - node_modules
            - packages/wcl-core/node_modules
            - packages/wcl-lit-ts/node_modules
      - run:
          name: Testing with playwright
          command: yarn lerna run test:playwright

  build:
    docker:
      - image: cimg/node:15.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - run:
          name: Build!
          command: yarn lerna run build
      - persist_to_workspace:
          root: ./
          paths:
            - packages/wcl-lit-ts/dist/
            - demos/vanilla-js/dist/
            - demos/vanilla-ts/dist/

  build-storybook:
    docker:
      - image: cimg/node:15.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - run:
          name: Build Storybook
          command: yarn lerna run build-storybook
      - persist_to_workspace:
          root: ./
          paths:
            - packages/wcl-lit-ts/storybook-static

  # https://gist.github.com/koshuang/0ba921cf4a542726d52e4622b6393eab#file-circleci_lerna-yarn_starter-L187
  publish:
    docker:
      - image: cimg/node:15.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
      - run:
          name: Publish packages to NPM
          command: npx lerna publish from-package --yes
